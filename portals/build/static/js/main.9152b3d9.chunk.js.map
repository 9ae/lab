{"version":3,"sources":["App.tsx","Pure.tsx","reportWebVitals.ts","index.tsx"],"names":["Box","props","ref","useRef","_useState","useState","_useState2","Object","slicedToArray","hovered","hover","_useState3","_useState4","clicked","click","useFrame","state","delta","current","rotation","x","speed","react_default","a","createElement","assign","scale","onClick","event","onPointerOver","onPointerOut","args","color","App","react_three_fiber_esm","position","Pure","mountRef","useEffect","canvasWrapper","scene","THREE","background","ar","window","innerWidth","innerHeight","camera","R","setSize","appendChild","domElement","add","frontBuffer","minFilter","magFilter","bottomBuffer","rightBuffer","addEventListener","width","height","aspect","updateProjectionMatrix","groundTexture","load","ground","map","side","set","rotateX","Math","PI","geometry","vertices","colors","sizes","i","random","y","objectPos","z","push","setHSL","r","g","b","floor","setAttribute","starsMaterial","vertexShader","fragmentShader","depthTest","transparent","vertexColors","particles","rainbowMaterial","specular","shininess","flatShading","geomPlane","frontPortal","texture","sideSize","rotateY","rightPortal","bottomPortal","box","wallMaterial","e0","e01","clone","e02","e03","e04","e1","e11","e12","e13","e14","e2","e21","e22","e23","e24","lookAt","controls","OrbitControls","minDistance","maxDistance","topShape","topLight","bottomCamera","leftShape","leftLight","rightCamera","backShape","backLight","frontCamera","animate","requestAnimationFrame","update","setRenderTarget","render","removeChild","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","StrictMode","react_router_dom","react_router","path","element","src_App","src_Pure"],"mappings":"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","file":"static/js/main.9152b3d9.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\nimport * as THREE from 'three'\nimport { Canvas, useFrame } from '@react-three/fiber'\n\ntype Portal = {\n  pos: [number, number]\n  camera: string\n}\n\nconst PortalView = (props: Portal) => (<p>{props.camera} @ [{props.pos[0]}, {props.pos[1]}]</p>);\n\ntype BoxProps = JSX.IntrinsicElements['mesh'] & {\n  speed: number\n}\n\nfunction Box(props: BoxProps) {\n  const ref = useRef<THREE.Mesh>(null!)\n  const [hovered, hover] = useState(false)\n  const [clicked, click] = useState(false)\n  useFrame((state, delta) => (ref.current.rotation.x += props.speed));\n  return (\n    <mesh\n      {...props}\n      ref={ref}\n      scale={clicked ? 1.5 : 1}\n      onClick={(event) => click(!clicked)}\n      onPointerOver={(event) => hover(true)}\n      onPointerOut={(event) => hover(false)}>\n      <boxGeometry args={[1, 1, 1]} />\n      <meshStandardMaterial color={hovered ? 'hotpink' : 'orange'} />\n    </mesh>\n  )\n}\n\n\nfunction App() {\n  return (\n    <Canvas>\n      <ambientLight />\n      <pointLight position={[10, 10, 10]} />\n      <Box position={[-1.2, 0, 0]} speed={0.01} />\n      <Box position={[1.2, 0, 0]} speed={-0.05} />\n    </Canvas>\n  );\n}\n\nexport default App;\n","import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport React, { useEffect, useRef } from \"react\";\n\nconst Pure = () => {\n\n  const mountRef = useRef<HTMLDivElement>(null);\n  const objectPos = 25;\n  const sideSize = 10;\n  const cameraPos = 12;\n  const cameraFOV = 20;\n  const cameraNear = 0.3;\n  const cameraFar = 1500;\n\n  const vertexShader = `\n  attribute float size;\n    varying vec3 vColor;\n\n    void main() {\n\n      vColor = color;\n      vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n      gl_PointSize = size * ( 300.0 / -mvPosition.z );\n      gl_Position = projectionMatrix * mvPosition;\n\n    }\n  `;\n\n  const fragmentShader = `\n\t\t\tvarying vec3 vColor;\n\n\t\t\tvoid main() {\n\t\t\t\tgl_FragColor = vec4( vColor, 1.0 );\n\t\t\t}\n  `;\n\n  useEffect(() => {\n    /* Setup */\n    const canvasWrapper = mountRef.current;\n    if (!canvasWrapper) return;\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x110011);\n    let ar = window.innerWidth / window.innerHeight;\n    const camera = new THREE.PerspectiveCamera(100, ar, 0.1, 1000);\n    const R = new THREE.WebGLRenderer();\n    R.setSize(window.innerWidth, window.innerHeight);\n    canvasWrapper.appendChild(R.domElement);\n\n    scene.add(new THREE.AmbientLight(0xffeeff));\n\n    const frontBuffer = new THREE.WebGLRenderTarget(window.innerWidth, window.innerHeight, { minFilter: THREE.LinearFilter, magFilter: THREE.NearestFilter });\n    const bottomBuffer = new THREE.WebGLRenderTarget(window.innerWidth, window.innerHeight, { minFilter: THREE.LinearFilter, magFilter: THREE.NearestFilter });\n    const rightBuffer = new THREE.WebGLRenderTarget(window.innerWidth, window.innerHeight, { minFilter: THREE.LinearFilter, magFilter: THREE.NearestFilter });\n\n    window.addEventListener('resize', function () {\n      var width = window.innerWidth;\n      var height = window.innerHeight;\n      R.setSize(width, height);\n      ar = width / height;\n      camera.aspect = ar;\n      camera.updateProjectionMatrix();\n    }, false);\n\n    /* Helpers \n    const axesHelper = new THREE.AxesHelper(5);\n    scene.add(axesHelper);\n    const helper = new THREE.CameraHelper(camera);\n    scene.add(helper);\n    const gridHelper = new THREE.GridHelper(50, 10);\n    scene.add(gridHelper);\n    */\n\n    /* Scene objects */\n\n    const texLoader = new THREE.TextureLoader();\n    const groundTexture = texLoader.load('tex/moonmap1k.jpeg');\n    const ground = new THREE.Mesh(new THREE.SphereGeometry(100),\n      new THREE.MeshBasicMaterial({ map: groundTexture, side: THREE.FrontSide }));\n    ground.position.set(0, -120, 0);\n    ground.rotateX(Math.PI / 2);\n    scene.add(ground);\n\n    const geometry = new THREE.BufferGeometry();\n    const vertices = [];\n    const colors = [];\n    const sizes = [];\n    const color = new THREE.Color();\n    for (let i = 0; i < 10000; i++) {\n\n      const x = 2000 * Math.random() - 1000;\n      const y = 1000 * Math.random() + objectPos * 2;\n      const z = 2000 * Math.random() - 1000;\n      vertices.push(x, y, z);\n\n      color.setHSL(Math.random(), 0.6, 0.9);\n      colors.push(color.r, color.g, color.b);\n\n      sizes.push(Math.floor(Math.random() * 3));\n\n    }\n    geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\n    geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\n    geometry.setAttribute('size', new THREE.Float32BufferAttribute(sizes, 1));\n    const starsMaterial = new THREE.ShaderMaterial({\n      vertexShader,\n      fragmentShader,\n      depthTest: false,\n      transparent: true,\n      vertexColors: true\n    });\n    const particles = new THREE.Points(geometry, starsMaterial);\n    scene.add(particles);\n\n    const rainbowMaterial = [0xFDABAB,\n      0xFDC9AB, //1\n      0xFDEBAB,\n      0xE3FDAB,\n      0xACFDB3, //4\n      0xACF3FC,\n      0xACC2FC, //6\n      0xC1ABFC,\n      0xFDABEA].map(color => (new THREE.MeshPhongMaterial({ color, specular: 0x009900, shininess: 30, flatShading: true })));\n\n    // add planes\n    const geomPlane = new THREE.PlaneBufferGeometry(sideSize, sideSize);\n\n    const frontPortal = new THREE.Mesh(geomPlane, new THREE.MeshBasicMaterial({\n      map: frontBuffer.texture,\n      //color: 0xeeaaaa,\n      side: THREE.FrontSide\n    }));\n    frontPortal.position.z = sideSize / 2;\n    frontPortal.rotateY(Math.PI);\n    scene.add(frontPortal);\n\n    const rightPortal = new THREE.Mesh(geomPlane, new THREE.MeshBasicMaterial({\n      map: rightBuffer.texture,\n      // color: 0xaaeeaa,\n      side: THREE.FrontSide\n    }));\n    rightPortal.rotateY(Math.PI / 2);\n    rightPortal.position.x = -sideSize / 2;\n    scene.add(rightPortal);\n\n    const bottomPortal = new THREE.Mesh(geomPlane, new THREE.MeshBasicMaterial({\n      map: bottomBuffer.texture,\n      // color: 0xaaaaee,\n      side: THREE.FrontSide\n    }));\n    bottomPortal.rotateX(Math.PI / -2);\n    bottomPortal.position.y = -sideSize / 2;\n    scene.add(bottomPortal);\n\n    const box = new THREE.Group();\n    {\n      const wallMaterial = rainbowMaterial[2];\n\n      const e0 = new THREE.Mesh(new THREE.BoxGeometry(0.5, 0.5, sideSize), wallMaterial);\n      const e01 = e0.clone();\n      e01.position.set(sideSize / 2, sideSize / 2, 0);\n      box.add(e01);\n      const e02 = e0.clone();\n      e02.position.set(sideSize / 2, -sideSize / 2, 0);\n      box.add(e02);\n      const e03 = e0.clone();\n      e03.position.set(-sideSize / 2, -sideSize / 2, 0);\n      box.add(e03);\n      const e04 = e0.clone();\n      e04.position.set(-sideSize / 2, sideSize / 2, 0);\n      box.add(e04);\n\n      const e1 = new THREE.Mesh(new THREE.BoxGeometry(sideSize, 0.5, 0.5), wallMaterial);\n      const e11 = e1.clone();\n      e11.position.set(0, sideSize / 2, sideSize / 2);\n      box.add(e11);\n      const e12 = e1.clone();\n      e12.position.set(0, -sideSize / 2, sideSize / 2);\n      box.add(e12);\n      const e13 = e1.clone();\n      e13.position.set(0, sideSize / 2, -sideSize / 2);\n      box.add(e13);\n      const e14 = e1.clone();\n      e14.position.set(0, -sideSize / 2, -sideSize / 2);\n      box.add(e14);\n\n      const e2 = new THREE.Mesh(new THREE.BoxGeometry(0.5, sideSize, 0.5), wallMaterial);\n      const e21 = e2.clone();\n      e21.position.set(sideSize / 2, 0, sideSize / 2);\n      box.add(e21);\n      const e22 = e2.clone();\n      e22.position.set(sideSize / 2, 0, -sideSize / 2);\n      box.add(e22);\n      const e23 = e2.clone();\n      e23.position.set(-sideSize / 2, 0, sideSize / 2);\n      box.add(e23);\n      const e24 = e2.clone();\n      e24.position.set(-sideSize / 2, 0, -sideSize / 2);\n      box.add(e24);\n\n\n    }\n    //new THREE.Mesh(new THREE.BoxGeometry(sideSize - 1, sideSize - 1, sideSize - 1), wallMaterial);\n    // new THREE.LineSegments(\n    //   new THREE.EdgesGeometry(new THREE.BoxGeometry(sideSize, sideSize, sideSize)),\n    //   new THREE.LineBasicMaterial({ color: 0xFDABEA, linewidth: 10 })\n    // );\n    scene.add(box);\n\n    // place camera\n    camera.position.x = 0;\n    camera.position.y = 0;\n    camera.position.z = 0;\n    camera.lookAt(0, 0, -sideSize / 2);\n    camera.updateProjectionMatrix();\n\n    const controls = new OrbitControls(camera, R.domElement);\n    controls.minDistance = 0.01;\n    controls.maxDistance = sideSize * 5;\n\n    // place objects & secondary cameras\n    const topShape = new THREE.Mesh(new THREE.TetrahedronGeometry(), rainbowMaterial[0]);\n    topShape.position.y = objectPos;\n    scene.add(topShape);\n    const topLight = new THREE.PointLight(0xddddaa, 0.02);\n    topLight.position.set(0, cameraPos, 0);\n    scene.add(topLight);\n    const bottomCamera = new THREE.PerspectiveCamera(cameraFOV, ar, cameraNear, cameraFar);\n    bottomCamera.position.y = cameraPos;\n    bottomCamera.lookAt(topShape.position);\n    bottomCamera.updateProjectionMatrix();\n\n    const leftShape = new THREE.Mesh(new THREE.OctahedronGeometry(), rainbowMaterial[4]);\n    leftShape.position.x = objectPos;\n    scene.add(leftShape);\n    const leftLight = new THREE.PointLight(0xddddaa, 0.02);\n    leftLight.position.set(cameraPos, 0, 0);\n    scene.add(leftLight)\n    const rightCamera = new THREE.PerspectiveCamera(cameraFOV, ar, cameraNear, cameraFar);\n    rightCamera.position.x = cameraPos;\n    rightCamera.lookAt(leftShape.position);\n    rightCamera.updateProjectionMatrix();\n\n    const backShape = new THREE.Mesh(new THREE.IcosahedronGeometry(), rainbowMaterial[7]);\n    backShape.position.z = -objectPos;\n    scene.add(backShape);\n    const backLight = new THREE.PointLight(0xddddaa, 0.02);\n    backLight.position.set(0, 0, cameraPos);\n    scene.add(backLight)\n    const frontCamera = new THREE.PerspectiveCamera(cameraFOV, ar, cameraNear, cameraFar);\n    frontCamera.position.z = -cameraPos;\n    frontCamera.lookAt(backShape.position);\n    frontCamera.updateProjectionMatrix();\n\n    // controls\n    /*\n    document.addEventListener('keydown', function (evt: KeyboardEvent) {\n      switch (evt.code) {\n        case \"ArrowLeft\":\n          camera.rotation.y -= 0.01 * Math.PI;\n          break;\n        case \"ArrowRight\":\n          camera.rotation.y += 0.01 * Math.PI;\n          break;\n        case \"ArrowUp\":\n          camera.rotation.x += 0.01 * Math.PI;\n          break;\n        case \"ArrowDown\":\n          camera.rotation.x -= 0.01 * Math.PI;\n          break;\n        default:\n          console.log(`Unhandled key ${evt.code}`);\n          break;\n      }\n      R.render(scene, camera);\n      camera.updateProjectionMatrix();\n    })\n    */\n\n\n    const animate = () => {\n      requestAnimationFrame(animate);\n      controls.update();\n\n      topShape.rotation.x += 0.01;\n      topShape.rotation.y -= 0.01;\n\n      leftShape.rotation.y += 0.01;\n      leftShape.rotation.z -= 0.01;\n\n      backShape.rotation.z += 0.01;\n      backShape.rotation.x -= 0.01;\n\n      R.setRenderTarget(frontBuffer);\n      R.render(scene, frontCamera);\n      R.setRenderTarget(rightBuffer);\n      R.render(scene, rightCamera);\n      R.setRenderTarget(bottomBuffer);\n      R.render(scene, bottomCamera);\n      R.setRenderTarget(null);\n      R.render(scene, camera);\n    };\n\n    animate();\n    return () => { canvasWrapper.removeChild(R.domElement) };\n  });\n\n  return (<div ref={mountRef}></div>);\n};\n\nexport default Pure;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport Pure from './Pure';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/\" element={<App />} />\n        <Route path=\"/pure\" element={<Pure />} />\n      </Routes>\n    </BrowserRouter>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}